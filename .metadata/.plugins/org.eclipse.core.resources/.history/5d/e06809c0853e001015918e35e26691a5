//Lectura de MPU

// Librerias
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <sys/_intsup.h>
#include <sys/unistd.h>
#include "driver/i2c.h"
#include "driver/mcpwm_prelude.h"
#include "driver/uart.h"
#include "driver/gpio.h"
#include "esp_adc/adc_oneshot.h"
#include "esp_err.h"
#include "esp_timer.h"


// Sintonia
#define vd 0.15f

#define k1 0.18f
#define k2 2.25f
#define k3 1.0f
#define k4 1.5f
#define kp 0.12f
#define kv 0.015f

// Compensacion angulo alpha
#define calpha  -0.4f

//Parametros
#define Ts      0.01f
#define ppr     12.0f
#define Ra      3.0f
#define NR      44.0f
#define R       0.034f
#define km      0.0008f
#define b       0.0965f
#define c1 0.995f

// Conversiones
#define deg_2_rad          0.0174533 
#define rad_2_deg          57.29578
#define accel_div_factor   16384.0
#define gyro_div_factor    131.0
#define accel_factor       0.0000610352
#define gyro_factor        0.0076336
#define pi_     3.141593f
#define pi_s2   1.570796f

// Constantes para calculos de control
#define c2                 (1.0f - c1)                    // 0.005f
#define iTs                (1.0f/Ts)                      // 100.0f
#define esc                (pi_/(2.0f*ppr*NR))           // 0.003581f
#define escs               (255.0f/uM)                    // 24.171f
#define Rasnkm             (Ra/(NR*km))                   // 85227.27f
#define nkm                (NR*km)                        // 0.0352f
#define v2tauM             (2.0f*tauM)                    // 0.6f
#define mv                 (255.0f/(2.0f*omegaM*R))      // 234.007f
#define mtheta             (255.0f/(2.0f*0.3f))          // 425.0f
#define malpha             (255.0f/(2.0f*alphaM))        // 91.071f
#define momega             (255.0f/(2.0f*omegaM))        // 7.968f
#define mu                 (255.0f/(2.0f*uM))            // 12.085f
#define deg_2_rad_gyro     (deg_2_rad * gyro_factor)     // 0.000133f
#define accel_pi_s2        (accel_factor * pi_s2)        // 0.0000958f
#define pwm_scale          (20000.0f / 255.0f)           // 78.431f
#define two_b              (2.0f * b)                     // 0.193f
#define R_over_two_b       (R / two_b)                    // 0.176f
#define two_b_over_R       (two_b / R)                    // 5.676f

// Angulos maximos
#define tauM    0.3f
#define alphaM  1.4f
#define omegaM  16.0f

// Voltajes maximos
#define uM      10.55f
#define uNM     10.00f

// Pines ESP32-MPU6050
#define SDA_PIN 21
#define SCL_PIN 22

// Registros MPU6050
#define MPU6050_ADDR    0x68
#define PWR_MGMT_1      0x6B
#define CONFIG_R        0x1A
#define GYRO_CONFIG     0x1B
#define ACCEL_CONFIG    0x1C
#define ACCEL_XOUT_H    0x3B
#define ACCEL_XOUT_L    0x3C
#define GYRO_YOUT_H     0x45
#define GYRO_YOUT_L     0x46

// Parametros I2C
#define I2C_MASTER_NUM  I2C_NUM_0
#define I2C_FREQ_HZ     400000
#define I2C_TIMEOUT_MS  1000

// Periodo de muestreo
#define TIMER_PERIOD_US 10000

//static const char *TAG = "i2c-simple-example";

// Variables para guardar datos del MPU6050
int16_t Ax, Gy;
uint8_t A_data_x[14];
uint8_t G_data_y[14];

// Variables de control del angulo para balanceo
float Xa = 0.0f, Yg = 0.0f, alpha = 0.0f;
float accelx = 0.15f, angulox = 0.15f, angulox_1 = 0.0f;

// tiempo
float t = 0.0f;

// variables para control de velocidad
float omegar = 0.0f, omegal = 0.0f;

// control de ruedas
float ur = 0.0f, ul = 0.0f;
int8_t uWr,uWl;

// conteo de posicion de ruedo
int8_t incr, incl;
float Sr,Sl;
int8_t posr,posl;               //Posiciones o cuentas del encoder.

// variables de angulos vertical y horizontal, velicidad, par
float v = 0.0f, alpha_1 = 0.0f, theta = 0.0f, thetad = -0.03f, thetatil = 0.0f, taua = 0.0f, u = 0.0f;
float alphap = 0.0f, vtil = 0.0f, thetap = 0.0f, taur = 0.0f, taul = 0.0f;
float intvtil = 0.0f;


// Variables para componentes
//static bool uart_working = true;
adc_oneshot_unit_handle_t adc1_handle;
mcpwm_timer_handle_t mcpwm_timer = NULL;
mcpwm_cmpr_handle_t comparator_a = NULL;
mcpwm_cmpr_handle_t comparator_b = NULL;
mcpwm_gen_handle_t generator_a = NULL;
mcpwm_gen_handle_t generator_b = NULL;
mcpwm_oper_handle_t operator = NULL;

// Variables para el timer - VOLÁTILES por ISR
volatile SemaphoreHandle_t timer_semaphore;
esp_timer_handle_t periodic_timer;

// Flag para inicialización del filtro
//static bool filter_initialized = false;


// Inicualizacion I2C
static esp_err_t i2c_init(void) {
    i2c_config_t conf = {
        .mode = I2C_MODE_MASTER,
        .sda_io_num = SDA_PIN,
        .scl_io_num = SCL_PIN,
        .sda_pullup_en = GPIO_PULLUP_ENABLE,
        .scl_pullup_en = GPIO_PULLUP_ENABLE,
        .master.clk_speed = I2C_FREQ_HZ
    };
    i2c_param_config(I2C_MASTER_NUM, &conf);
    return i2c_driver_install(I2C_MASTER_NUM, conf.mode, 0, 0, 0);
}

// Lectura de encoders
void read_encoders(void) {
    int16_t current_count_r = 0, current_count_l = 0;
    
    // Conteo de posicion actual
    pcnt_get_counter_value(PCNT_UNIT_0, &current_count_r);
    pcnt_get_counter_value(PCNT_UNIT_1, &current_count_l);
    
    incr = current_count_r - last_count_r;
    incl = current_count_l - last_count_l;
    
    // OPTIMIZACIÓN: usar constante pre-calculada
    if (incr > ENCODER_OVERFLOW_THRESHOLD) {
        incr -= ENCODER_RANGE;
    } else if (incr < -ENCODER_OVERFLOW_THRESHOLD) {
        incr += ENCODER_RANGE;
    }
    
    if (incl > ENCODER_OVERFLOW_THRESHOLD) {
        incl -= ENCODER_RANGE;
    } else if (incl < -ENCODER_OVERFLOW_THRESHOLD) {
        incl += ENCODER_RANGE;
    }
    
    posr += incr;
    posl += incl;
    
    last_count_r = current_count_r;
    last_count_l = current_count_l;
}

void app_main(void){
	
	
	while (1) {
	read_encoders();
      
      usleep(10000);
}
}
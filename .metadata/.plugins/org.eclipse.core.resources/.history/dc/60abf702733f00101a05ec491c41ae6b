//Lectura de MPU

// Librerias
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <sys/_intsup.h>
#include <sys/unistd.h>
#include "driver/i2c.h"
#include "driver/mcpwm_prelude.h"
#include "driver/uart.h"
#include "driver/gpio.h"
#include "esp_adc/adc_oneshot.h"
#include "esp_err.h"
#include "esp_timer.h"


// Sintonia
#define vd 0.15f

#define k1 0.18f
#define k2 2.25f
#define k3 1.0f
#define k4 1.5f
#define kp 0.12f
#define kv 0.015f

// Compensacion angulo alpha
#define calpha  -0.4f

//Parametros
#define Ts      0.01f
#define ppr     12.0f
#define Ra      3.0f
#define NR      44.0f
#define R       0.034f
#define km      0.0008f
#define b       0.0965f
#define c1 0.995f

// Conversiones
#define deg_2_rad          0.0174533 
#define rad_2_deg          57.29578
#define accel_div_factor   16384.0
#define gyro_div_factor    131.0
#define accel_factor       0.0000610352
#define gyro_factor        0.0076336
#define pi_     3.141593f
#define pi_s2   1.570796f

// Constantes para calculos de control
#define c2                 (1.0f - c1)                    // 0.005f
#define iTs                (1.0f/Ts)                      // 100.0f
#define esc                (pi_/(2.0f*ppr*NR))           // 0.003581f
#define escs               (255.0f/uM)                    // 24.171f
#define Rasnkm             (Ra/(NR*km))                   // 85227.27f
#define nkm                (NR*km)                        // 0.0352f
#define v2tauM             (2.0f*tauM)                    // 0.6f
#define mv                 (255.0f/(2.0f*omegaM*R))      // 234.007f
#define mtheta             (255.0f/(2.0f*0.3f))          // 425.0f
#define malpha             (255.0f/(2.0f*alphaM))        // 91.071f
#define momega             (255.0f/(2.0f*omegaM))        // 7.968f
#define mu                 (255.0f/(2.0f*uM))            // 12.085f
#define deg_2_rad_gyro     (deg_2_rad * gyro_factor)     // 0.000133f
#define accel_pi_s2        (accel_factor * pi_s2)        // 0.0000958f
#define pwm_scale          (20000.0f / 255.0f)           // 78.431f
#define two_b              (2.0f * b)                     // 0.193f
#define R_over_two_b       (R / two_b)                    // 0.176f
#define two_b_over_R       (two_b / R)                    // 5.676f

// Angulos maximos
#define tauM    0.3f
#define alphaM  1.4f
#define omegaM  16.0f

// Voltajes maximos
#define uM      10.55f
#define uNM     10.00f

// Pines ESP32-MPU6050
#define SDA_PIN 21
#define SCL_PIN 22

// Registros MPU6050
#define MPU6050_ADDR    0x68
#define PWR_MGMT_1      0x6B
#define CONFIG_R        0x1A
#define GYRO_CONFIG     0x1B
#define ACCEL_CONFIG    0x1C
#define ACCEL_XOUT_H    0x3B
#define ACCEL_XOUT_L    0x3C
#define GYRO_YOUT_H     0x45
#define GYRO_YOUT_L     0x46

// Parametros I2C
#define I2C_MASTER_NUM  I2C_NUM_0
#define I2C_FREQ_HZ     400000
#define I2C_TIMEOUT_MS  1000

// Periodo de muestreo
#define TIMER_PERIOD_US 10000

//static const char *TAG = "i2c-simple-example";

// Variables para guardar datos del MPU6050
int16_t Ax, Gy;
uint8_t A_data_x[14];
uint8_t G_data_y[14];

// Variables de control del angulo para balanceo
float Xa = 0.0f, Yg = 0.0f, alpha = 0.0f;
float accelx = 0.15f, angulox = 0.15f, angulox_1 = 0.0f;

// tiempo
float t = 0.0f;

// variables para control de velocidad
float omegar = 0.0f, omegal = 0.0f;

// control de ruedas
float ur = 0.0f, ul = 0.0f;
int8_t uWr,uWl;

// conteo de posicion de ruedo
int8_t incr, incl;
float Sr,Sl;
int8_t posr,posl;               //Posiciones o cuentas del encoder.

// variables de angulos vertical y horizontal, velicidad, par
float v = 0.0f, alpha_1 = 0.0f, theta = 0.0f, thetad = -0.03f, thetatil = 0.0f, taua = 0.0f, u = 0.0f;
float alphap = 0.0f, vtil = 0.0f, thetap = 0.0f, taur = 0.0f, taul = 0.0f;
float intvtil = 0.0f;


// Variables para componentes
//static bool uart_working = true;
adc_oneshot_unit_handle_t adc1_handle;
mcpwm_timer_handle_t mcpwm_timer = NULL;
mcpwm_cmpr_handle_t comparator_a = NULL;
mcpwm_cmpr_handle_t comparator_b = NULL;
mcpwm_gen_handle_t generator_a = NULL;
mcpwm_gen_handle_t generator_b = NULL;
mcpwm_oper_handle_t operator = NULL;

// Variables para el timer - VOLÁTILES por ISR
volatile SemaphoreHandle_t timer_semaphore;
esp_timer_handle_t periodic_timer;

// Flag para inicialización del filtro
//static bool filter_initialized = false;


// Inicualizacion I2C
static esp_err_t i2c_init(void) {
    i2c_config_t conf = {
        .mode = I2C_MODE_MASTER,
        .sda_io_num = SDA_PIN,
        .scl_io_num = SCL_PIN,
        .sda_pullup_en = GPIO_PULLUP_ENABLE,
        .scl_pullup_en = GPIO_PULLUP_ENABLE,
        .master.clk_speed = I2C_FREQ_HZ
    };
    i2c_param_config(I2C_MASTER_NUM, &conf);
    return i2c_driver_install(I2C_MASTER_NUM, conf.mode, 0, 0, 0);
}

// Escritura al MPU6050
void MPU6050_write(uint8_t reg, uint8_t data) {
    uint8_t write_buf[2] = {reg, data};
    i2c_master_write_to_device(I2C_MASTER_NUM, MPU6050_ADDR, write_buf, sizeof(write_buf), I2C_TIMEOUT_MS / portTICK_PERIOD_MS);
}

// Configuración del MPU6050
void MPU6050_init() {
    MPU6050_write(PWR_MGMT_1, 0x80);
    usleep(100000);
    MPU6050_write(PWR_MGMT_1, 0x00);
    usleep(100000);
    MPU6050_write(CONFIG_R, 0x01);
    usleep(10000);
    MPU6050_write(GYRO_CONFIG, 0x00);
    usleep(10000);
    MPU6050_write(ACCEL_CONFIG, 0x00); 
    usleep(10000);
}


// Lectura de Ax
void MPU6050_get_Ax() {
	uint8_t raw_data[2];
    uint8_t reg = ACCEL_XOUT_H;
    esp_err_t ret = i2c_master_write_read_device(I2C_MASTER_NUM, MPU6050_ADDR, &reg, 1, 
                                raw_data, 2, I2C_TIMEOUT_MS / portTICK_PERIOD_MS);
    if (ret == ESP_OK) {
        // Solo usar AccelX (primeros 2 bytes)
        A_data_x[0] = raw_data[0];
        A_data_x[1] = raw_data[1];
    }
}

// Lectura de Gy
void MPU6050_get_Gy() {
	uint8_t raw_data[2];
    uint8_t reg = GYRO_YOUT_H;
    esp_err_t ret = i2c_master_write_read_device(I2C_MASTER_NUM, MPU6050_ADDR, &reg, 1, 
                                raw_data, 2, I2C_TIMEOUT_MS / portTICK_PERIOD_MS);
    if (ret == ESP_OK) {
        G_data_y[0] = raw_data[0];
        G_data_y[1] = raw_data[1];
    }
}

void app_main(void){
	ESP_ERROR_CHECK(i2c_init());
		
	MPU6050_init();
	
	while (1) {
	MPU6050_get_Ax();
	
	MPU6050_get_Gy();
	
	//Lectura cargada en variable Ax
	Ax=0;
	Ax = (A_data_x[0]<<8)|A_data_x[1];
     
    //Lectura cargada en variable Gy
    Gy=0;
    Gy = (G_data_y[0]<<8)|G_data_y[1];
	
	//Los valores del MPU los paso a valores flotantes con sus respectivas escalas
    Xa=(float)-Ax*accel_factor; //Xa en rango de -1 a 1
    Yg=(float)Gy*gyro_factor;   //Yg en grados sobre segundo
    Yg=deg_2_rad*Yg;     //Yg en rad sobre segundo 
    
    //Cálculo del filtro complementario
    accelx=Xa*pi_s2;  //Inclinación en rango de -pi/2 a pi/2 rad
    angulox=c1*(angulox_1+Yg*Ts)+c2*accelx;//Ecuación del filtro complementario
    angulox_1=angulox;//Respaldando valor pasado
    alpha=-angulox;
    
    printf("alpha: %f \n", alpha);
    
    alpha=alpha-calpha;//Compensación de alineación del MPU
    printf("alpha con compensacion: %f \n", alpha);
    
    
    // Saturación de alpha
            if (alpha >= alphaM)
                alpha = alphaM;
            if (alpha <= (-alphaM))
                alpha = -alphaM;
                
    //Cálculo de velocidad traslacional
      v=(omegar+omegal)*R/2.0;   
      //Cálculo de theta punto
      thetap=(omegar-omegal)*R/(2.0*b);
               
      thetatil=theta-thetad;     //Se calcula theta tilde
      alphap=(alpha-alpha_1)*iTs;//Se calcula alpha punto
      alpha_1=alpha;
      vtil=v-vd;                 //Se calcula v tilde
      if((intvtil<v2tauM)&&(intvtil>(-v2tauM))) //Integral de v tilde
         intvtil=intvtil+Ts*vtil;
      else
      {
         if(intvtil>=v2tauM)
            intvtil=0.95*v2tauM;
         if(intvtil<=(-v2tauM))
            intvtil=-0.95*v2tauM; 
      }
      //Esfuerzos de control   
      taua=(-kv*thetap-kp*thetatil)*2.0*b/R;
      u=k1*alphap+k2*alpha+k3*vtil+k4*intvtil;
      if(u>=v2tauM)
         u=v2tauM;
      if(u<=(-v2tauM))
         u=-v2tauM; 
                           
      //Pares por rueda      
      taur=(taua+u)/2.0;  // par derecho
      taul=(-taua+u)/2.0;  // par izquierdo
                           
      //Voltaje rueda izquierda
      ul=taul*Rasnkm+nkm*omegal;   
      //ul=uNM*sin(6.2*t);
      //ul=0.0;
      //ul=-5.0;
      //ul=-uNM;
      if(ul>=uNM)
         ul=uNM;
      if(ul<=(-uNM))
         ul=-uNM;
      uWl=escs*fabs(ul);
      /*if(ul<0)
      {
         output_high(pin_d0);
         output_low(pin_d1);
      }
      else
      {
         output_low(pin_d0);
         output_high(pin_d1);
      }*/

      
      //Voltaje rueda derecha    
      ur=taur*Rasnkm+nkm*omegar;
      //ur=uNM*sin(6.28*t);
      //ur=0.0;
      //ur=5.0;
      //ur=uNM;
      if(ur>=uNM)
         ur=uNM;
      if(ur<=(-uNM))
         ur=-uNM;
      uWr=escs*fabs(ur);
      
      usleep(10000);
}
}